# ========================
# Настройка HTTP-сервера
# ========================
server:
  port: 8081  # Порт, на котором будет работать user-service (http://localhost:8081)

# ========================
# Основные настройки Spring Boot
# ========================
spring:
  application:
    name: user-service  # Имя сервиса (для Eureka, Kafka, Config Server и маршрутизации через Gateway)

  # Настройки подключения к базе данных PostgreSQL
  datasource:
    url: jdbc:postgresql://localhost:5432/interviewproject_user_service  # Адрес базы данных
    username: postgres  # Логин PostgreSQL
    password: postgres  # Пароль PostgreSQL

  # Настройки JPA (Hibernate)
  jpa:
    hibernate:
      ddl-auto: update  # Автоматически обновлять схему БД при старте (удобно в dev)
    show-sql: true  # Показывать SQL-запросы в консоли
    properties:
      hibernate:
        format_sql: true  # Форматировать SQL для читаемости
    database-platform: org.hibernate.dialect.PostgreSQLDialect  # Диалект для PostgreSQL

  # ========================
  # Kafka (если используешь напрямую, не через Cloud Stream)
  # ========================
  kafka:
    bootstrap-servers: localhost:9092  # Адрес Kafka-брокера
    consumer:
      group-id: user-group  # Группа Consumer'ов
      auto-offset-reset: earliest  # Читать с самого начала при отсутствии offset
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

  # ========================
  # Spring Cloud Stream (для взаимодействия с Kafka через абстракции)
  # ========================
  cloud:
    stream:
      binders:
        kafka:  # Название Kafka-биндера
          type: kafka
          environment:
            spring:
              kafka:
                bootstrap-servers: localhost:9092  # Адрес Kafka для binder'а

      bindings:
        # Producer: отправка события UserCreatedEvent
        userCreated-out-0:
          destination: user-created-topic  # Kafka-топик
          content-type: application/json
          binder: kafka

        # Consumer: приём события из Kafka
        userCreated-in-0:
          destination: user-created-topic
          group: user-group
          content-type: application/json
          binder: kafka

# ========================
# Spring Boot Actuator
# ========================
management:
  endpoints:
    web:
      exposure:
        include: "*"  # Включаем все actuator endpoints: /actuator/health, /actuator/env и т.д.
  endpoint:
    health:
      show-details: always  # Показывать детали в /actuator/health (например, состояние БД, Kafka)

# ========================
# Eureka Discovery Client
# ========================
eureka:
  instance:
    appname: user-service  # Имя сервиса в Eureka (должно совпадать с lower-case-service-id в Gateway)
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}  
    # Уникальный идентификатор инстанса (важно при масштабировании — чтобы не конфликтовали)
