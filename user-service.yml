# Настройка HTTP-сервера (встроенный Tomcat)
server:
  port: 8081  # user-service будет запущен на http://localhost:8081

spring:
  application:
    name: user-service  # Имя сервиса. Используется для Eureka, Spring Cloud Config, Kafka и т.д.

  # Настройки подключения к базе данных PostgreSQL
  datasource:
    url: jdbc:postgresql://localhost:5432/interviewproject_user_service  # JDBC-URL для PostgreSQL
    username: postgres    # Имя пользователя
    password: postgres    # Пароль

  # Конфигурация JPA (Hibernate)
  jpa:
    hibernate:
      ddl-auto: update    # Автоматическое обновление схемы БД (только для разработки)
    show-sql: true        # Показывать SQL-запросы в консоли
    properties:
      hibernate:
        format_sql: true  # Форматировать SQL-запросы
    database-platform: org.hibernate.dialect.PostgreSQLDialect  # Диалект для PostgreSQL

  # Настройки Kafka (если используешь напрямую, без Cloud Stream)
  kafka:
    bootstrap-servers: localhost:9092  # Адрес брокера Kafka
    consumer:
      group-id: user-group             # Идентификатор группы consumer'ов
      auto-offset-reset: earliest      # Читать с самого начала, если нет offset
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

  # Настройки Spring Cloud Stream для работы с Kafka
  cloud:
    config:
      discovery:
        enabled: false  # Отключаем поиск config-server через Eureka (мы указываем URI вручную)
    stream:
      binders:
        kafka:  # Название binder'а
          type: kafka  # Тип binder'а (Kafka)
          environment:
            spring:
              kafka:
                bootstrap-servers: localhost:9092  # Адрес Kafka-брокера
      bindings:
        userCreated-out-0:  # Канал для отправки сообщений
          destination: user-created-topic  # Название Kafka-топика
          content-type: application/json   # Сериализация в JSON
          binder: kafka                    # Используем binder с названием kafka

        userCreated-in-0:  # Канал для получения сообщений (Consumer)
          destination: user-created-topic  # Kafka-топик
          group: user-group                # Группа Consumer'ов
          content-type: application/json
          binder: kafka

# Настройки Spring Boot Actuator (метрики, состояние и т.д.)
management:
  endpoints:
    web:
      exposure:
        include: "*"  # Включаем все endpoints, например: /actuator/health, /actuator/metrics
  endpoint:
    health:
      show-details: always  # Показывать подробности статуса (например, статус подключения к Kafka и БД)
