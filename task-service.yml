server:
  port: 8082

spring:
  application:
    name: task-service

  datasource:
    url: jdbc:postgresql://localhost:5432/interviewproject_task_service
    username: postgres
    password: postgres

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    enabled: true
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

logging:
  level:
    org.springframework.security: DEBUG

#TODO не забудь про кафку позже
#вот пример из user-service только у нас наверно должны быть тдругие топики и всякая шняга
#kafka:
#  bootstrap-servers: localhost:9092  # Адрес Kafka-брокера
#  consumer:
#    group-id: user-group             # Идентификатор consumer-группы
#    auto-offset-reset: earliest     # Читать с самого начала, если offset не найден
#    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # Десериализация ключа
#    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # Десериализация значения
  # ========================
  # Конфигурация Spring Cloud Stream для работы с Kafka через абстракции
  # ========================
#  cloud:
#    stream:
#      binders:
#        kafka:  # Название Kafka-биндера (ссылаемся в bindings)
#          type: kafka
#          environment:
#            spring:
#              kafka:
#                bootstrap-servers: localhost:9092  # Адрес Kafka-брокера
#  bindings:
#    # === Producer: отправка события UserCreatedEvent ===
#    userCreated-out-0:
#      destination: user-created-topic       # Название Kafka-топика для отправки
#      content-type: application/json        # Формат сообщений
#      binder: kafka                         # Используемый binder (см. выше)
#
#    # === Consumer: приём события из Kafka ===
#    userCreated-in-0:
#      destination: user-created-topic       # Название Kafka-топика для получения
#      group: user-group                     # Группа consumer'ов
#      content-type: application/json
#      binder: kafka
